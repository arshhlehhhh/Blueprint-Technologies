import requests
import json
import boto3
import datetime

comprehend = boto3.client(service_name='comprehend', region_name='us-east-1',
                          aws_access_key_id='AKIAJNVBM6Z7NHLR37VQ', aws_secret_access_key='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')


def _get_articles_json():
    print('start')
    bloombergURL = "https://bloomberg-market-and-financial-news.p.rapidapi.com/news/list"
    querystring = {"id": "markets"}

    headers = {
        'x-rapidapi-host': "bloomberg-market-and-financial-news.p.rapidapi.com",
        'x-rapidapi-key': "f8536abd04mshb0913f77ef52327p10feaejsn9af75169faa5"
    }

    try:
        response = requests.request(
            "GET", bloombergURL, headers=headers, params=querystring)
        response = response.json()
        global comprehend
        final_result = []
        glossary_list = (requests.request(
            "GET", "http://192.168.1.226:8050/api/getallglossary")).json()
        terms_list = {}
        for i in glossary_list:
            terms_list[i["term"]] = [i["description"], i["actionable"]]
        for i in response["modules"]:
            pass
            if "stories" in i.keys():
                for j in i["stories"]:
                    try:
                        if j["primaryCategory"] == "Markets":
                            count = 1
                            present_terms = {}
                            title = j["title"]
                            summary = j["summary"]
                            autosummary = j["autoGeneratedSummary"]
                            text_to_analyse = title + " " + summary + " " + autosummary
                            result = comprehend.detect_sentiment(
                                Text=text_to_analyse, LanguageCode='en')

                            for term in terms_list.keys():
                                title_check = title.lower().find(term.lower())
                                if (title_check != -1):
                                    title = title[:title_check] + "<span onClick=\"showData(\"id" + str(
                                        count) + "\")>" + title[title_check:title_check+len(term)] + "</span>" + title[title_check+len(term):]
                                    present_terms["id" +
                                                  str(count)] = terms_list[term]
                                    count += 1
                                    continue
                                summary_check = summary.lower().find(term.lower())
                                if (summary_check != -1):
                                    summary = summary[:summary_check] + "<span onClick=\"showData(\"id" + str(
                                        count) + "\")>" + summary[summary_check:summary_check+len(term)] + "</span>" + summary[summary_check+len(term):]
                                    present_terms["id" +
                                                  str(count)] = terms_list[term]
                                    count += 1
                                    continue
                                auto_sum_check = autosummary.lower().find(term.lower())
                                if (auto_sum_check != -1):
                                    autosummary = autosummary[:auto_sum_check] + "<span onClick=\"showData(\"id" + str(
                                        count) + "\")>" + autosummary[auto_sum_check:auto_sum_check+len(term)] + "</span>" + autosummary[auto_sum_check+len(term):]
                                    present_terms["id" +
                                                  str(count)] = terms_list[term]
                                    count += 1
                                    continue

                            agg_result = {
                                "distinctID": j["internalID"],
                                "articleData": {
                                    "title": title,
                                    "summary": summary,
                                    "autoGeneratedSummary": autosummary,
                                    "url": j["shortURL"],
                                    "Sentiment": result["Sentiment"],
                                    "SentimentScore": result["SentimentScore"],
                                    "GlossaryTerms": present_terms
                                },
                                "timestamp": datetime.date.today().strftime('%Y-%m-%d')
                            }
                            final_result.append(agg_result)
                    except:
                        pass
        print("done")
        print(json.dumps(final_result, indent=4, sort_keys=True))
        article_url = 'http://192.168.1.226:8051/api/pusharticles'

        x = requests.post(article_url, json=final_result)
        return x
    except Exception as e:
        print(e)
        return None


def update_articles():
    result = _get_articles_json()
    return result
